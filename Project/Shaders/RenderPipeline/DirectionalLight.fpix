#version 450

layout(location = 0) in vec2 vUV;

layout(binding = 0) uniform sampler2D colorSampler;
layout(binding = 1) uniform sampler2D normalSampler;
layout(binding = 2) uniform sampler2D specSampler;
layout(binding = 3) uniform sampler2D depthSampler;

#!structure(CameraBuffer, 5, 1, camBuffer)
#!structure(SSDirectionalLightBuffer, 6, 2, dirLightBuffer)

const float Splits = 5.0;

layout(location = 0) out vec4 fragColor;

void main()
{
    vec4 normal = texture(normalSampler, vUV);
    if (normal.w < 0.5f)
    {
        discard;
    }
    vec4 color = texture(colorSampler, vUV);

    vec3 cF = camBuffer.View[2].xyz;

    vec4 finalColor = vec4(0.0, 0.0, 0.0, 0.0);

    for (int i = 0; i < dirLightBuffer.Count; i++)
    {
        vec4 lD = dirLightBuffer.objects[i].LightDir;
        vec4 lCr = dirLightBuffer.objects[i].LightColor;

        float l = max(dot(lD.xyz, normal.xyz), 0.0);
        float lS = int(l * Splits) / Splits;

        vec3 lC = color.xyz * lS * lCr.xyz * lD.w;

        finalColor += vec4(lC, 1.0);
    }
    
    fragColor = vec4(finalColor.xyz, 1.0);
}